model Notification {
  id String @id @default(uuid())

  title       String
  description String
  link        String?
  read        Boolean @default(false)

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  createdById String? @map("created_by_id")
  createdBy   Member? @relation(fields: [createdById], references: [id], name: "createdBy", onDelete: Cascade)

  destinationId String @map("destination_id")
  destination   Member @relation(fields: [destinationId], references: [id], name: "destination", onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  readAt    DateTime?

  @@map("notifications")
}

enum RoleScope {
  WORKSPACE
  GLOBAL
}

model Role {
  id String @id @default(uuid())

  name        String
  permissions Int[]

  scope RoleScope @default(WORKSPACE)

  workspaceId String?    @map("workspace_id")
  workspace   Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  workspaceKey String @default("")

  users User[]

  creatorId String? @map("creator_id")
  creator   Member? @relation(fields: [creatorId], references: [id], onDelete: Cascade, name: "creator")

  members Member[] @relation(name: "members")
  invites Invite[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([workspaceKey, name, scope], map: "workspace_id_name_scope_idx")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(uuid())

  provider          String
  providerAccountId String @map("provider_account_id")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id String @id @default(uuid())

  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  createdAt DateTime? @map("created_at")
  updatedAt DateTime? @map("updated_at")

  accounts          Account[]
  invites           Invite[]
  members           Member[]
  verificationToken VerificationToken[]

  @@map("users")
}

enum VerificationType {
  ACTIVE_ACCOUNT
}

model VerificationToken {
  type    VerificationType
  token   String           @unique @default(uuid())
  expires DateTime

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verification_tokens")
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELLED
  PAUSED
  UNPAUSED
  TRIALING
  EXPIRED
  INCOMPLETE
  INCOMPLETE_EXPIRED
}

model Subscription {
  id String @id @default(cuid())

  plan String @default("free")

  workspaceId String    @unique @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  stripeSubscriptionId String? @unique @map("stripe_subscription_id")
  stripeCustomerId     String? @unique @map("stripe_customer_id")
  stripeProductId      String? @map("stripe_product_id")
  stripePriceId        String? @map("stripe_price_id")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status SubscriptionStatus

  @@map("subscriptions")
}

model Member {
  id String @id @default(uuid())

  email String
  image String?
  name  String?

  fcmToken String? @map("fcm_token")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  notifications        Notification[] @relation("destination")
  createdNotifications Notification[] @relation("createdBy")
  invites              Invite[]

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id], name: "members")

  creatorRole Role[] @relation(name: "creator")

  owner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
  @@unique([email, workspaceId])
  @@map("members")
}

model Workspace {
  id String @id @default(uuid())

  slug        String  @unique
  name        String
  description String?

  backgroundImage String // url | color

  subscription  Subscription?
  members       Member[]
  invites       Invite[]
  notifications Notification[]
  roles         Role[]

  disabledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workspaces")
}

model Invite {
  id String @id @default(uuid())

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  email String

  roleId String @map("role_id")
  role   Role   @relation(fields: [roleId], references: [id])

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  creatorId String @map("creator_id")
  creator   Member @relation(fields: [creatorId], references: [id])

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, email])
}
