enum IndexStatus {
  PENDING
  INDEXING
  INDEXED
  ERROR
}

model File {
  id String @id @default(uuid())

  fileName    String @map("file_name")
  fileSize    Int    @map("file_size")
  contentType String @map("content_type")

  isDocument Boolean @default(false) @map("is_document")

  indexStatus IndexStatus @map("index_status")
  indexError  String?     @map("index_error")

  memoryId String? @map("memory_id")

  groupId String @map("group_id")
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdById String? @map("created_by")
  createdBy   Member? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  FileTag   FileTag[]

  @@index([memoryId])
  @@index([fileSize])
  @@index([indexStatus])
  @@map("files")
}

model FileTag {
  fileId String @map("file_id")
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  tagId String @map("tag_id")
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([fileId, tagId])
  @@map("file_tags")
}
