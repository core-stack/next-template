enum IndexStatus {
  PENDING
  INDEXING
  INDEXED
  ERROR
}

enum SourceType {
  TEXT
  FILE
  LINK
  VIDEO
  AUDIO
  IMAGE
}

model Source {
  id String @id @default(uuid()) @db.Char(36)

  name        String  @db.VarChar(255)
  description String?

  originalName String? @map("original_name") // for file, video, audio, image
  extension    String? // for image, video, audio, file
  contentType  String? @map("content_type") // for file, image, video, audio
  size         Int? // for file, image, video, audio
  url          String? // for link, video, audio, image
  width        Int? // for image, video
  height       Int? // for image, video
  metadata     Json? // for video, audio, image, file

  sourceType SourceType @map("source_type")

  indexStatus IndexStatus @map("index_status")
  indexError  String?     @map("index_error")

  memoryId String? @map("memory_id")

  groupId String @map("group_id") @db.Char(36)
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdById String? @map("created_by")
  createdBy   Member? @relation(fields: [createdById], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tags SourceTag[]

  @@index([memoryId])
  @@index([indexStatus])
  @@map("sources")
}

model SourceTag {
  sourceId String @map("file_id") @db.Char(36)
  source   Source @relation(fields: [sourceId], references: [id], onDelete: Cascade)

  tagId String @map("tag_id") @db.Char(36)
  tag   Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([sourceId, tagId])
  @@map("file_tags")
}
