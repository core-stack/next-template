model Member {
  id String @id @default(uuid())

  email String
  image String?
  name  String?

  fcmToken String? @map("fcm_token")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  notifications        Notification[] @relation("destination")
  createdNotifications Notification[] @relation("createdBy")
  invites              Invite[]

  roleId String @map("role_id")
  role Role @relation(fields: [roleId], references: [id], name: "members")

  creatorRole Role[] @relation(name: "creator")

  owner Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, workspaceId])
  @@unique([email, workspaceId])
  @@map("members")
}

model Workspace {
  id String @id @default(uuid())

  slug        String  @unique
  name        String
  description String?

  backgroundImage String // url | color

  subscription  Subscription?
  members       Member[]
  invites       Invite[]
  notifications Notification[]
  roles         Role[]

  disabledAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("workspaces")
}

model Invite {
  id String @id @default(uuid())

  workspaceId String    @map("workspace_id")
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  email String

  roleId String @map("role_id")
  role Role @relation(fields: [roleId], references: [id])

  userId String? @map("user_id")
  user   User?   @relation(fields: [userId], references: [id])

  creatorId String @map("creator_id")
  creator Member @relation(fields: [creatorId], references: [id])

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, email])
}
